// Create tables
-----------------------------------------------

-- Create a table for Public Profiles
create table profiles (
  id uuid references auth.users not null,
  user_type text,
  first_name text,
  last_name text,
  avatar_url text,
  website text,
  company text,
  birthday date,  
  updated_at timestamp with time zone,

  primary key (id)
);

alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime
  add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

create policy "Anyone can update an avatar." on storage.objects
  for update with check (bucket_id = 'avatars');


// Function
-----------------------------------------------

create or replace function public.handle_new_user() 
returns trigger as $$
begin
  if (new.raw_user_meta_data->>'user_type' = 'client') then
    insert into public.client_profiles (id, first_name, last_name, phone_number, user_type)
    values (
      new.id,
      new.raw_user_meta_data->>'first_name',
      new.raw_user_meta_data->>'last_name',
      new.raw_user_meta_data->>'phone_number',
      new.raw_user_meta_data->>'user_type'
    );
  else 
    insert into public.model_profiles (id, first_name, last_name, phone_number, user_type)
    values (
      new.id,
      new.raw_user_meta_data->>'first_name',
      new.raw_user_meta_data->>'last_name',
      new.raw_user_meta_data->>'phone_number',
      new.raw_user_meta_data->>'user_type'
    );
  end if;
  return new;
end;
$$ language plpgsql security definer;



// Trigger
-----------------------------------------------

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();